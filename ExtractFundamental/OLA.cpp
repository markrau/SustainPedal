

#include <math.h>
#include "OLA.h"
#include <iostream>
#include <stdio.h>
using namespace std;

#define DEFAULT_BUFFER_SIZE 1024
#define FIXED_BITS        16
#define FIXED_WBITS       0
#define FIXED_FBITS       15
#define Q15_RESOLUTION   (1 << (FIXED_FBITS - 1))
#define MAX_INT16   	  32767
#define MAX_INT32		  2147483647


/*@brief	Overlap adds consecutive buffers
* 			and loops it in output buffer
* @param 	window			Pointer to hamming window array
* @param	buf_len 		Length of buffer incoming buffer
* @param	ola				overlap factor
* @param	hopSize			hopSize between subsequent buffers
* @param	Fs				Sampling rate
*/

OLA::OLA(long Fs, int bufferLen, int overlap, int* win)
	{
	if (buf_len < 1) {
        buf_len = DEFAULT_BUFFER_SIZE;
    } else {
        buf_len = bufferLen;
    }
	fs = Fs;
	ola = overlap;
	window = new int[buf_len];
	win_mult = new int[buf_len];
	hopSize = buf_len - ola;
	for(int i = 0; i < buf_len;i++){
		window[i] = win[i];
	}
	s1 = 0;
	s2 = hopSize;
	//window coefficients received from MATLAB
	//default size 1024, sorry!
	/*window[DEFAULT_BUFFER_SIZE] = {2621,2622,2623,2624,2626,2629,2632,2635,2640,2644,2650,2656,2662,2669,2677,2685,2694,2704,2713,2724,2735,2747,
	2759,2772,2785,2799,2813,2828,2844,2860,2877,2894,2912,2930,2949,2968,2988,3009,3030,3052,3074,3097,3120,3144,3169,3194,
	3219,3245,3272,3299,3327,3355,3384,3413,3443,3473,3504,3536,3568,3600,3633,3667,3701,3736,3771,3807,3843,3880,3917,3955,
	3993,4032,4071,4111,4152,4193,4234,4276,4318,4361,4405,4449,4493,4538,4583,4629,4676,4723,4770,4818,4866,4915,4964,5014,
	5065,5115,5167,5218,5270,5323,5376,5430,5484,5538,5593,5649,5705,5761,5818,5875,5933,5991,6049,6108,6168,6228,6288,6349,
	6410,6471,6533,6596,6659,6722,6786,6850,6914,6979,7044,7110,7176,7243,7310,7377,7445,7513,7581,7650,7719,7789,7859,7929,
	8000,8071,8142,8214,8286,8359,8432,8505,8578,8652,8727,8801,8876,8951,9027,9103,9179,9256,9332,9410,9487,9565,9643,9721,
	9800,9879,9959,10038,10118,10198,10279,10359,10440,10522,10603,10685,10767,10850,10932,11015,11098,11181,11265,11349,11433,
	11517,11602,11687,11772,11857,11942,12028,12114,12200,12286,12373,12460,12547,12634,12721,12808,12896,12984,13072,13160,
	13249,13337,13426,13515,13604,13693,13782,13872,13961,14051,14141,14231,14321,14412,14502,14593,14683,14774,14865,14956,
	15047,15138,15229,15321,15412,15504,15595,15687,15779,15871,15963,16055,16147,16239,16331,16423,16516,16608,16700,16793,
	16885,16978,17070,17163,17255,17348,17440,17533,17625,17718,17810,17903,17996,18088,18181,18273,18366,18458,18551,18643,
	18735,18828,18920,19012,19104,19197,19289,19381,19473,19565,19656,19748,19840,19931,20023,20114,20206,20297,20388,20479,
	20570,20661,20752,20842,20933,21023,21113,21203,21293,21383,21473,21562,21652,21741,21830,21919,22008,22097,22185,22273,
	22361,22449,22537,22625,22712,22799,22886,22973,23060,23146,23232,23318,23404,23490,23575,23660,23745,23830,23914,23998,
	24082,24166,24250,24333,24416,24499,24581,24663,24745,24827,24908,24990,25070,25151,25231,25311,25391,25471,25550,25629,
	25707,25785,25863,25941,26018,26095,26172,26249,26325,26400,26476,26551,26626,26700,26774,26848,26921,26994,27067,27139,
	27211,27283,27354,27425,27495,27566,27635,27705,27774,27842,27911,27979,28046,28113,28180,28246,28312,28378,28443,28507,
	28572,28636,28699,28762,28825,28887,28949,29010,29071,29132,29192,29251,29311,29369,29428,29486,29543,29600,29657,29713,
	29768,29824,29878,29933,29986,30040,30093,30145,30197,30249,30300,30350,30400,30450,30499,30547,30596,30643,30690,30737,
	30783,30829,30874,30919,30963,31007,31050,31092,31135,31176,31217,31258,31298,31338,31377,31415,31454,31491,31528,31565,
	31601,31636,31671,31705,31739,31773,31805,31838,31869,31901,31931,31962,31991,32020,32049,32077,32104,32131,32157,32183,
	32208,32233,32257,32281,32304,32327,32349,32370,32391,32411,32431,32450,32469,32487,32504,32521,32538,32554,32569,32584,
	32598,32611,32624,32637,32649,32660,32671,32681,32691,32700,32708,32716,32724,32730,32737,32742,32747,32752,32756,32759,
	32762,32765,32766,32767,32768,32768,32767,32766,32765,32762,32759,32756,32752,32747,32742,32737,32730,32724,32716,32708,
	32700,32691,32681,32671,32660,32649,32637,32624,32611,32598,32584,32569,32554,32538,32521,32504,32487,32469,32450,32431,
	32411,32391,32370,32349,32327,32304,32281,32257,32233,32208,32183,32157,32131,32104,32077,32049,32020,31991,31962,31931,
	31901,31869,31838,31805,31773,31739,31705,31671,31636,31601,31565,31528,31491,31454,31415,31377,31338,31298,31258,31217,
	31176,31135,31092,31050,31007,30963,30919,30874,30829,30783,30737,30690,30643,30596,30547,30499,30450,30400,30350,30300,30249,
	30197,30145,30093,30040,29986,29933,29878,29824,29768,29713,29657,29600,29543,29486,29428,29369,29311,29251,29192,29132,
	29071,29010,28949,28887,28825,28762,28699,28636,28572,28507,28443,28378,28312,28246,28180,28113,28046,27979,27911,27842,
	27774,27705,27635,27566,27495,27425,27354,27283,27211,27139,27067,26994,26921,26848,26774,26700,26626,26551,26476,26400,
	26325,26249,26172,26095,26018,25941,25863,25785,25707,25629,25550,25471,25391,25311,25231,25151,25070,24990,24908,24827,
	24745,24663,24581,24499,24416,24333,24250,24166,24082,23998,23914,23830,23745,23660,23575,23490,23404,23318,23232,23146,
	23060,22973,22886,22799,22712,22625,22537,22449,22361,22273,22185,22097,22008,21919,21830,21741,21652,21562,21473,21383,
	21293,21203,21113,21023,20933,20842,20752,20661,20570,20479,20388,20297,20206,20114,20023,19931,19840,19748,19656,19565,
	19473,19381,19289,19197,19104,19012,18920,18828,18735,18643,18551,18458,18366,18273,18181,18088,17996,17903,17810,17718,
	17533,17440,17348,17255,17163,17070,16978,16885,16793,16700,16608,16516,16423,16331,16239,16147,16055,15963,15871,15779,
	15687,15595,15504,15412,15321,15229,15138,15047,14956,14865,14774,14683,14593,14502,14412,14321,14231,14141,14051,13961,
	13872,13782,13693,13604,13515,13426,13337,13249,13160,13072,12984,12896,12808,12721,12634,12547,12460,12373,12286,12200,
	12114,12028,11942,11857,11772,11687,11602,11517,11433,11349,11265,11181,11098,11015,10932,10850,10767,10685,10603,10522,
	10440,10359,10279,10198,10118,10038,9959,9879,9800,9721,9643,9565,9487,9410,9332,9256,9179,9103,9027,8951,8876,8801,8727,
	8652,8578,8505,8432,8359,8286,8214,8142,8071,8000,7929,7859,7789,7719,7650,7581,7513,7445,7377,7310,7243,7176,7110,7044,
	6979,6914,6850,6786,6722,6659,6596,6533,6471,6410,6349,6288,6228,6168,6108,6049,5991,5933,5875,5818,5761,5705,5649,5593,
	5538,5484,5430,5376,5323,5270,5218,5167,5115,5065,5014,4964,4915,4866,4818,4770,4723,4676,4629,4583,4538,4493,4449,4405,
	4361,4318,4276,4234,4193,4152,4111,4071,4032,3993,3955,3917,3880,3843,3807,3771,3736,3701,3667,3633,3600,3568,3536,3504,
	3473,3443,3413,3384,3355,3327,3299,3272,3245,3219,3194,3169,3144,3120,3097,3074,3052,3030,3009,2988,2968,2949,2930,2912,
	2894,2877,2860,2844,2828,2813,2799,2785,2772,2759,2747,2735,2724,2713,2704,2694,2685,2677,2669,2662,2656,2650,2644,2640,
	2635,2632,2629,2626,2624,2623,2622,2621};*/

}
	
OLA::~OLA(){
	delete[] window;
	delete[] win_mult;
}

//multiply signal with window

//function to perform overlap add - we are just cross-fading the same buffer onto itself again and again
void OLA::overlap_add(int* curInBuf, int* curOutBuf){
	
	int start = 0;
	for(int i = 0; i < buf_len; i++){
		win_mult[i] = q.Q15mult(window[i], curInBuf[i]);
		curOutBuf[i] = 0;
	}
	
	if(s2 == hopSize && s1 == 0){
		for(int i = 0; i < ola; i++){
			curOutBuf[i] = win_mult[i+hopSize];
		}
		start = ola;
	}
	else{
		start = 0;
	}
	
    /*for(int i = 0; i < hopSize; i++){
		curOutBuf[i] = q.Q15addWrap(win_mult[buf_len-hopSize+i],win_mult[i]);
	}
		
	for(int i = hopSize; i < buf_len - hopSize; i++){
		curOutBuf[i] = win_mult[i];
	}
		
	for(int i = buf_len-hopSize;i < buf_len; i++){
		curOutBuf[i] = q.Q15addWrap(win_mult[i-buf_len+hopSize],win_mult[i]);
	}*/
	
	for(int i = start; i < buf_len-s1;i++){
		curOutBuf[i] = win_mult[s1+i];
	}
	
	for(int i = s2; i <buf_len; i++){
		curOutBuf[i] = q.Q15addWrap(curOutBuf[i], win_mult[i-s2]);
	}
	
	cout << s1 << "," << s2 << endl;
	if(s2 == 0 && s1 == hopSize){
		s1 = 0;
		s2 = hopSize;
	}
	else{
		s1 += ola;
		s2 -= ola;
	}
	
}


